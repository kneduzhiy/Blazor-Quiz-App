@page "/Quiz/{QuizId}"

@inject QuizService QuizService
@inject NavigationManager NavManager

<div id="select-alert" class="alert alert-danger" style="display:@(ShowValidationAlert ? "block":"none")">
    Please select at least one option or fill out the required fields.
</div>

<h1>Quiz</h1>

@if (QuizObject == null)
{
    <p>Loading quiz...</p>
}

<div id="start-quiz" style="display:@startQuizStyle">
    <h4>@QuizObject.Name</h4>
    <p>@QuizObject.Description</p>

    <button @onclick="StartQuiz">Start quiz!</button>
</div>

<div id="quiz" style="display:@mainQuizStyle">
    <p id="time-left" style="color:red;display:@(QuizObject.IsQuizTimeBased ? "block":"none")"><span class="oi oi-timer"></span> @TimeLeft</p>
    <h4>@(ActiveQuestionId + 1). @QuizObject.Questions[ActiveQuestionId].Name</h4>
    <p style="font-size:12px;">@QuizObject.Questions[ActiveQuestionId].Description</p>
    <hr />
    @foreach (var choice in QuizObject.Questions[ActiveQuestionId].Choices)
    {
        <input name="@ActiveQuestionId" id="@choice.Id" value="@choice.Id" type="radio" style="transform:scale(1.5);" @onchange="TickAnswer" checked="@(SelectedAnswerGuid == choice.Id)" />
        <label for="@choice.Id">@choice.Text</label>
        <br /><br />
    }

    <button @onclick="NextQuestion">@questionButtonLabel</button>
</div>

<div id="finish-quiz" style="display:@finishQuizStyle">
    <h4>Successfully finished quiz</h4>
    <p>Here are your results: <br /> Answered <b>@CorrectQuestionsCount</b> out of total <b>@QuizQuestionCount</b> questions.</p>

    <button @onclick="ExitQuiz">Go to quiz overview</button>
</div>

@code {
    private string startQuizStyle => QuizStarted ? "none" : "block";
    private string mainQuizStyle => QuizStarted && !QuizFinished ? "block" : "none";
    private string finishQuizStyle => QuizFinished ? "block" : "none";

    private string questionButtonLabel { get; set; } = "Next question";

    [Parameter]
    public string QuizId { get; set; }

    public Quizoo.Model.Quiz QuizObject { get; set; }
    public TimerPlus QuizTimer { get; set; }
    public int QuizQuestionCount { get; set; }
    public bool QuizStarted { get; set; } = false;
    public bool QuizFinished { get; set; } = false;
    public bool ShowValidationAlert { get; set; } = false;

    public int ActiveQuestionId { get; set; }
    public int CorrectQuestionsCount { get; set; }
    public string TimeLeft { get; set; }
    public string SelectedAnswerGuid { get; set; }
    public QuizChoice SelectedAnswer => QuizService?.GetChoice(SelectedAnswerGuid);

    [System.Diagnostics.DebuggerNonUserCode]
    protected override void OnInitialized()
    {
        QuizObject = QuizService.GetQuiz(QuizId);
        if(QuizObject == null)
        {
            NavManager.NavigateTo("/Quiz", true);
            return;
        }

        QuizQuestionCount = QuizObject.Questions.Count;
        ActiveQuestionId = 0;
    }

    public void StartQuiz()
    {
        if (QuizObject.IsQuizTimeBased)
        {
            QuizTimer = new TimerPlus();
            QuizTimer.Interval = QuizObject.QuizMaxTimeInSeconds * 1000;

            QuizTimer.Elapsed += (e, evt) =>
            {
                FinishQuiz();
                Console.WriteLine(evt.SignalTime);
            };

            var labelTimer = new Timer(1000);
            labelTimer.AutoReset = true;
            labelTimer.Elapsed += (sender, evt) =>
            {
                TimeLeft = FormatTimeLeft(QuizTimer.TimeLeft);
                InvokeAsync(() => StateHasChanged());
            };

            QuizTimer.Start();
            labelTimer.Start();
        }

        QuizStarted = true;
    }

    private string FormatTimeLeft(double time)
    {
        var timeSpan = TimeSpan.FromMilliseconds(time);
        string seconds = timeSpan.Seconds < 10 ? $"0{timeSpan.Seconds}" : timeSpan.Seconds.ToString();
        return $"{timeSpan.Minutes}:{seconds}";
    }

    public void FinishQuiz()
    {
        CalculateResult();
        QuizService.WriteResults(QuizObject, CorrectQuestionsCount);

        QuizFinished = true;
    }

    public void NextQuestion()
    {
        if (SelectedAnswer == null)
        {
            ShowValidationAlert = true;
            return;
        }
        else ShowValidationAlert = false;

        if ((ActiveQuestionId + 2) == QuizQuestionCount)
        {
            questionButtonLabel = "Finish quiz";
        }
        else if ((ActiveQuestionId + 1) == QuizQuestionCount)
        {
            FinishQuiz();

            return;
        }

        CalculateResult();
        ActiveQuestionId++;
    }

    public void CalculateResult()
    {
        if (SelectedAnswer != null && SelectedAnswer.IsCorrectAnswer)
        {
            CorrectQuestionsCount++;
        }

        SelectedAnswerGuid = string.Empty;
    }

    public void TickAnswer(ChangeEventArgs e)
    {
        SelectedAnswerGuid = (string)e.Value;
    }

    public void ExitQuiz()
    {
        NavManager.NavigateTo("/Quiz", true);
    }
}

